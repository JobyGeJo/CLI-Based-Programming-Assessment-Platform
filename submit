#! /usr/bin/python3

# import necessary libraries
import sys
import time
import base64
import subprocess
from datetime import datetime
import textwrap

class Banner:

    def __init__(self, width: int = 60):
        self.width = width
        self.heading_width = width - 2
        self.content_width = width - 25
        self.separator = "-" * width + '\n'
        self.no_key_filler = f' |\n| {' ' * 20} '

        self.keys = []
        self.values = []

    def add_value(self, key: str, value: str | int) -> None:
        self.keys.append(key)
        self.values.append(self.get_processed_message(str(value)))

    def get_processed_message(self, message: str) -> str:
        context = textwrap.fill(message.strip(), self.content_width).split("\n")
        return self.no_key_filler.join(map(lambda x: f'{x:<{self.content_width}}', context))

    def __repr__(self) -> str:
        report_lines = [self.separator, f"|{'SUBMISSION REPORT':^{self.heading_width}}|\n", self.separator]

        # Loop through data and format lines efficiently
        for label, value in zip(self.keys, self.values):
            report_lines.append(f"| {label:<19}: {value:>{self.content_width}} |\n")
            report_lines.append(self.separator)

        return "".join(report_lines)

# The function get_input reads the content of the file
# Decodes the encoded file and split the input ny '-----'
# Return the inputs if the file exists
def get_input(basename):
	"""
	    Reads the test input file, decodes the base64-encoded content, and splits the input based on '-----'.

	    Args:
	        basename (str): The base name of the source file (without extension).

	    Returns:
	        list: A list of test case inputs.

	    Raises:
	        FileNotFoundError: If the input file does not exist.
	"""
	user_inputs = []
	try:
		with open("/program_lab/private_test/" + basename, 'r') as fp:
			user_input = fp.read()
			user_input = base64.b64decode(user_input)
			user_input = user_input.decode()
			t = ''
			for i in user_input.splitlines():
				if '-----' in i:
					user_inputs.append(t)
					t = ''
				else:
					t = i + '\n'

		return user_inputs

	except FileNotFoundError:
		print(f"Program: `{basename}` Not Found!!!")
		sys.exit(0)

# The function evaluate check the program exist or not
# Checks the programming language using extension and execute based on that
# if the file is Java it executes the compiled binary
# Run the test cases and check the output of both user and host program
# return the fail_count, total_count, total_time
def evaluate(basename, extension, user_inputs, prog_file):
	"""
	    Evaluates the user program by executing it against predefined test cases and comparing its output.

	    Args:
	        basename (str): The base name of the program.
	        extension (str): The programming language extension ('py' or 'java').
	        user_inputs (list): The list of test case inputs.
	        prog_file (str): The full filename of the user's program.

	    Returns:
	        tuple: If an error occurs, returns (True, 'Error Message'). Otherwise, returns
	               (False, total test count, failed test count, total execution time in milliseconds).
	"""
	total_count = 0
	fail_count = 0
	total_time = 0
	status = True
	IS_JAVA = False
	for user_input in user_inputs:
		try:

			exe_fp = "/program_lab/executables/"+basename
			host_run = subprocess.Popen([""+exe_fp], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

			match extension:
				case 'java':
					compile = subprocess.run(["javac", prog_file], capture_output=True)
					if compile.returncode != 0:
						return True, 'Compilation Error'

					user_run = subprocess.Popen(["java", basename], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
					IS_JAVA = True

				case 'py':
					user_run = subprocess.Popen(["python3", prog_file], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

				case _:
					print(f"File Format [{extension}] Not Compatable!!!")
					sys.exit(0)

			start_time = time.time()
			user_out, user_err = user_run.communicate(timeout=10, input=user_input.encode())
			end_time = time.time()
			total_time += (end_time - start_time)

			host_out, host_err = host_run.communicate(timeout=10, input=user_input.encode())

		except subprocess.TimeoutExpired:
			user_err = 'Time Limit Exceeded'
			return True, user_err

		if user_run.returncode != 0:
			return True, 'Runtime Error'

		elif user_out != host_out:
			status =  False

		total_count += 1
		fail_count += 0 if status else 1

		if IS_JAVA:
			subprocess.run(["rm", f'{basename}.class'])

	return False, total_count, fail_count, total_time


# The function display_result prints the result in the Tabular format
# Print "The Submission Report"
# If anyone Test case caused Error , it shows the 'Error Occured'
# Not display the failed count and passed count
def display_result(ERROR_OCCURED, total_time = '-', total_count = '-', fail_count = '-'):
	submission_status = '\u2713' if fail_count == 0 and not ERROR_OCCURED else '\u2717'

	banner = Banner(50)

	if ERROR_OCCURED:
		banner.add_value("Status", "ERROR OCCURED...")

	else:
		banner.add_value("Test Case Passed", total_count - fail_count)
		banner.add_value("Test Case Failed", fail_count)
		banner.add_value("Time Taken", f"{total_time:.2f}ms")

	banner.add_value("Submission Status", submission_status)

# The function update_log logs the result in the CSV format
# the log file is located in "/var/log/program_lab.log"
# it logs the result with the username
def update_log(basename, prog_lang, total_count = '-', fail_count = '-', total_time = '-', status = ''):
	"""
	    Logs the result of the program evaluation in a CSV format.

	    Args:
	        basename (str): The base name of the program.
	        prog_lang (str): The programming language used.
	        total_count (int, optional): Total number of test cases. Defaults to '-'.
	        fail_count (int, optional): Number of failed test cases. Defaults to '-'.
	        total_time (float, optional): Total execution time. Defaults to '-'.
	        status (str, optional): The final status ('Successful' or 'Failed'). Defaults to ''.
	"""
	with open("/var/log/program_lab.log", 'a') as fp:
		username = subprocess.run("whoami", capture_output=True, text=True)
		username = username.stdout.splitlines()[0]

		if status != '':
			t = f'{datetime.now()},{username},{basename},{prog_lang},{status},-,-,-\n'
		else:
			status = 'Sucessful' if fail_count == 0 else 'Failed'
			t = f'{datetime.now()},{username},{basename},{prog_lang},{status},{fail_count},{total_count - fail_count},{total_time}\n'

		fp.write(t)


argv = sys.argv

# Checking the file is given as Command Line Argument or not
# If not given print "Not Found" and exit the program

if len(argv) == 1:
	print("Source File Not Found.....")
	print("Usage: argv[0] <source file>")
	sys.exit(0)

# --- Main Execution ---

if __name__ == "__main__":

	argv = sys.argv
	if len(argv) == 1:
		print("Source File Not Found.....")
		print("Usage: argv[0] <source file>")
		sys.exit(0)

	basename = argv[1].split('.')[0]
	user_inputs = get_input(basename)

	extension = argv[1].split('.')[-1]
	prog_lang = "Python" if extension == 'py' else "Java" if extension == 'java' else None

	if not prog_lang:
		print(f"Unsupported file format: {extension}")
		sys.exit(0)

	result = evaluate(basename, extension, user_inputs, argv[1])

	if len(result) == 2:
		ERROR_OCCURED, status = result
		update_log(basename, prog_lang, status=status)
		display_result(ERROR_OCCURED)
	else:
		ERROR_OCCURED, total_count, fail_count, total_time = result
		total_time = (total_time / total_count) * 1000

		update_log(basename, prog_lang, total_count, fail_count, total_time)
		display_result(ERROR_OCCURED, total_time, total_count, fail_count)

